var documenterSearchIndex = {"docs":
[{"location":"reference/reference/","page":"API Reference","title":"API Reference","text":"CurrentModule = OWENSPreComp","category":"page"},{"location":"reference/reference/#Index","page":"API Reference","title":"Index","text":"","category":"section"},{"location":"reference/reference/","page":"API Reference","title":"API Reference","text":"","category":"page"},{"location":"reference/reference/#Types-and-functions","page":"API Reference","title":"Types and functions","text":"","category":"section"},{"location":"reference/reference/","page":"API Reference","title":"API Reference","text":"Modules = [OWENSPreComp]","category":"page"},{"location":"reference/reference/#OWENSPreComp.Input","page":"API Reference","title":"OWENSPreComp.Input","text":"Struct for holding inputs to OWENSPreComp.properties()\n\n\n\n\n\n","category":"type"},{"location":"reference/reference/#OWENSPreComp.Output","page":"API Reference","title":"OWENSPreComp.Output","text":"Struct type for holding outputs of OWENSPreComp.properties()\n\n\n\n\n\n","category":"type"},{"location":"reference/reference/#OWENSPreComp.input","page":"API Reference","title":"OWENSPreComp.input","text":"Struct for holding inputs to OWENSPreComp.properties()\n\n\n\n\n\n","category":"type"},{"location":"reference/reference/#OWENSPreComp.embed_ls-NTuple{4, Any}","page":"API Reference","title":"OWENSPreComp.embed_ls","text":"embed_ls(x, nodes_l, xnode_l, ynode_l)\n\npurpose: embed a node in the lower-surface airfoil section nodes NOTE: nodal x coordinates must be in ascending order\n\nArguments:\n\nx::Real: x-coordinate of node to be embedded in the l-surf\nnodes_l::Int: no of current nodes on the lower surface\nxnode_l::Array{<:Real,1}: x-nodes on lower surface\nynode_l::Array{<:Real,1}: y-nodes on lower surface\n\nOutputs:\n\nnodes_l: revised no of current nodes on lower surface\nxnode_l: x-nodes on lower surface\nynode_l: y-nodes on lower surface\ny: y-coordinate of node embedded in the l-surf\nnewnode : number of the embedded node\n\n\n\n\n\n","category":"method"},{"location":"reference/reference/#OWENSPreComp.embed_us-Tuple{Real, Int64, Any, Any}","page":"API Reference","title":"OWENSPreComp.embed_us","text":"embed_us(x, nodes_u, xnode_u, ynode_u)\n\npurpose: embed a node in the upper-surface airfoil section nodes NOTE: nodal x coordinates must be in ascending order\n\nArguments:\n\nx::Real: x-coordinate of node to be embedded in the u-surf\nnodes_u::Int: no of current nodes on the upper surface\nxnode_u::Array{<:Real,1}: x-nodes on upper surface\nynode_u::Array{<:Real,1}: y-nodes on upper surface\n\nOutputs:\n\nnodes_u: revised no of current nodes on upper surface\nxnode_u: x-nodes on upper surface\nynode_u: y-nodes on upper surface\ny: y-coordinate of node embedded in the u-surf\nnewnode : number of the embedded node\n\n\n\n\n\n","category":"method"},{"location":"reference/reference/#OWENSPreComp.properties-Tuple{Real, Real, Real, Real, AbstractVector{<:Real}, AbstractVector{<:Real}, AbstractVector{<:Real}, AbstractVector{<:Real}, AbstractVector{<:Real}, AbstractVector{<:Real}, AbstractVector{<:Real}, AbstractVector{<:Real}, AbstractVector{<:Real}, AbstractVector{<:Real}, AbstractVector{<:Real}, AbstractVector{<:Real}, AbstractVector{<:Real}, AbstractVector{<:Real}, AbstractVector{<:Real}, AbstractVector{<:Real}, AbstractVector{<:Real}, AbstractVector{<:Real}, AbstractVector{<:Real}, AbstractVector{<:Real}, AbstractVector{<:Real}, AbstractVector{<:Real}, AbstractVector{<:Real}, AbstractVector{<:Real}, AbstractVector{<:Real}}","page":"API Reference","title":"OWENSPreComp.properties","text":"properties(chord::Array{<:Real,1}, tw_aero_d::Array{<:Real,1},\ntw_prime_d::Array{<:Real,1}, le_loc::Real, xnode::Array{<:Real,1},\nynode::Array{<:Real,1}, e1::Array{<:Real,1}, e2::Array{<:Real,1},\ng12::Array{<:Real,1}, anu12::Array{<:Real,1}, density::Array{<:Real,1},\nxsec_nodeU::Array{<:Real,1}, n_laminaU::Array{Int64,1},\nn_pliesU::Array{Int64,1}, t_lamU::Array{<:Real,1},\ntht_lamU::Array{<:Real,1}, mat_lamU::Array{Int64,1},\nxsec_nodeL::Array{<:Real,1}, n_laminaL::Array{Int64,1},\nn_pliesL::Array{Int64,1}, t_lamL::Array{<:Real,1},\ntht_lamL::Array{<:Real,1}, mat_lamL::Array{Int64,1},\nloc_web::Array{<:Real,1}, n_laminaW::Array{Int64,1},\nn_pliesW::Array{Int64,1}, t_lamW::Array{<:Real,1},\ntht_lamW::Array{<:Real,1}, mat_lamW::Array{Int64,1})\n\nCalculates span-variant structural properties for composite blades\n\nInputs\n\nchord::Real: section chord length (m)\ntw_aero_d::Real: section twist angle (deg)\ntw_prime_d::Real: derivative of section twist angle w.r.t. span location (deg/m)\nle_loc::Real: leading edge location relative to reference axis (normalized by chord)\nxnode::Array{<:Real,1}: x airfoil coordinates starting at leading edge traversing upper surface and back around lower surface\nynode::Array{<:Real,1}: y airfoil coordinates starting at leading edge traversing upper surface and back around lower surface\ne1::Array{<:Real,1}: E1\ne2::Array{<:Real,1}: E2\ng12::Array{<:Real,1}: G12\nanu12::Array{<:Real,1}: Nu12\ndensity::Array{<:Real,1}: density\nxsec_nodeU::Array{<:Real,1}: upper surface normalized chord location of sector boundaries\nn_laminaU::Array{Int64,1}: upper surface number of lamina in each sector\nn_pliesU::Array{Int64,1}: upper surface number of plies\nt_lamU::Array{<:Real,1}: upper surface ply thickness (m) for the lamina\ntht_lamU::Array{<:Real,1}: upper surface orientation (deg) for the lamina\nmat_lamU::Array{Int64,1}: upper surface material id for the lamina\nxsec_nodeL::Array{<:Real,1}: lower surface normalized chord location of sector boundaries\nn_laminaL::Array{Int64,1}: lower surface number of lamina in each sector\nn_pliesL::Array{Int64,1}: lower surface number of plies\nt_lamL::Array{<:Real,1}: lower surface ply thickness (m) for the lamina\ntht_lamL::Array{<:Real,1}: lower surface orientation (deg) for the lamina\nmat_lamL::Array{Int64,1}: lower surface material id for the lamina\nloc_web::Array{<:Real,1}: web normalized chord location of sector boundaries\nn_laminaW::Array{Int64,1}: web number of lamina in each sector\nn_pliesW::Array{Int64,1}: web number of plies\nt_lamW::Array{<:Real,1}: web ply thickness (m) for the lamina\ntht_lamW::Array{<:Real,1}: web orientation (deg) for the lamina\nmat_lamW::Array{Int64,1}: web material id for the lamina\n\nOutputs:\n\neifbar: ei_flap, Section flap bending stiffness about the YE axis (Nm2)\neilbar: ei_lag, Section lag (edgewise) bending stiffness about the XE axis (Nm2)\ngjbar: gj, Section torsion stiffness (Nm2)\neabar: ea, Section axial stiffness (N)\neiflbar: s_fl, Coupled flap-lag stiffness with respect to the XE-YE frame (Nm2)\nsfbar: s_af, Coupled axial-flap stiffness with respect to the XE-YE frame (Nm)\nslbar: s_al, Coupled axial-lag stiffness with respect to the XE-YE frame (Nm.)\nsftbar: s_ft, Coupled flap-torsion stiffness with respect to the XE-YE frame (Nm2)\nsltbar: s_lt, Coupled lag-torsion stiffness with respect to the XE-YE frame (Nm2)\nsatbar: s_at, Coupled axial-torsion stiffness (Nm)\nz_sc: x_sc, X-coordinate of the shear-center offset with respect to the XR-YR axes (m)\ny_sc: y_sc, Chordwise offset of the section shear-center with respect to the reference frame, XR-YR (m)\nztc_ref: x_tc, X-coordinate of the tension-center offset with respect to the XR-YR axes (m)\nytc_ref: y_tc, Chordwise offset of the section tension-center with respect to the XR-YR axes (m)\nmass: mass, Section mass per unit length (Kg/m)\niflap_eta: flap_iner, Section flap inertia about the YG axis per unit length (Kg-m)\nilag_zeta: lag_iner, Section lag inertia about the XG axis per unit length (Kg-m)\ntw_iner_d: twinerd, Orientation of the section principal inertia axes with respect the blade reference plane, Î¸ (deg)\nzcm_ref: x_cm, X-coordinate of the center-of-mass offset with respect to the XR-YR axes (m)\nycm_ref: y_cm, Chordwise offset of the section center of mass with respect to the XR-YR axes (m)\nn_af_nodes: number of airfoil nodes\nn_materials: number of materials\nn_sctU: number of sectors on upper\nn_sctL: number of sectors on lower\nnwebin: number of webs\nn_laminaTotalU: total number of lamina on upper\nn_laminaTotalL: total number of lamina on lower\nn_laminaTotalW: total number of lamina on webs\n\n\n\n\n\n","category":"method"},{"location":"reference/reference/#OWENSPreComp.properties-Union{Tuple{OWENSPreComp.Input{R}}, Tuple{R}} where R<:Real","page":"API Reference","title":"OWENSPreComp.properties","text":"properties(pc_input::Input)\n\nCalculates span-variant structural properties for composite blades. Holds all inputs and outputs to properties function in structs\n\n\n\n\n\n","category":"method"},{"location":"reference/reference/#OWENSPreComp.q_bars-NTuple{7, Any}","page":"API Reference","title":"OWENSPreComp.q_bars","text":"q_bars(mat, thp, density, q11, q22, q12, q66)\n\nArguments\n\nmat: material id\nthp: ply orientation\ndensity:\nq11:\nq22:\nq12:\nq66:\n\nOutputs\n\nqbar11:\nqbar22:\nqbar12:\nqbar16:\nqbar26:\nqbar66:\nrho_m:\n\n\n\n\n\n","category":"method"},{"location":"reference/reference/#OWENSPreComp.readcompositesection-Tuple{String, Vector{Float64}}","page":"API Reference","title":"OWENSPreComp.readcompositesection","text":"readcompositesection(fname::String,locw::Array{Float64,1})\n\nReads a composite section input file. Returns locU, nlaminaU, npliesU, tU, thetaU, matidxU, locL, nlaminaL, npliesL, tL, thetaL, matidxL, locW, nlaminaW, npliesW, tW, thetaW, mat_idxW\n\n\n\n\n\n","category":"method"},{"location":"reference/reference/#OWENSPreComp.readmain-Tuple{String}","page":"API Reference","title":"OWENSPreComp.readmain","text":"readmain(\"fname::String\")\n\nReads a main OWENSPreComp input file. Returns sloc,leloc,chord,twaero,afshapefile,intstrfile, ibspstn,obspstn,ibchloc,obchloc\n\n\n\n\n\n","category":"method"},{"location":"reference/reference/#OWENSPreComp.readmaterials","page":"API Reference","title":"OWENSPreComp.readmaterials","text":"readmaterials(fname = \"materials.inp\")\n\nreads material properties from OWENSPreComp materials input file fname returns e1,e2,g12,nu12,rho,name\n\n\n\n\n\n","category":"function"},{"location":"reference/reference/#OWENSPreComp.readprecompprofile-Tuple{String}","page":"API Reference","title":"OWENSPreComp.readprecompprofile","text":"readprecompprofile(filename::String) Reads precomp profile file. Returns xu, yu, xl, yl\n\n\n\n\n\n","category":"method"},{"location":"reference/reference/#OWENSPreComp.readprofile-Tuple{String, Int64, Bool}","page":"API Reference","title":"OWENSPreComp.readprofile","text":"readprofile(filename::String, numHeaderlines::Int64, LEtoLE::Bool) Reads precomp profile file. Returns xu, yu, xl, yl\n\n\n\n\n\n","category":"method"},{"location":"reference/reference/#OWENSPreComp.readsectorsfromfile-Tuple{IOStream, Int64}","page":"API Reference","title":"OWENSPreComp.readsectorsfromfile","text":"readsectorsfromfile(f::IOStream, n_sector::Int64)\n\nReads OWENSPreComp sector. Returns nlamina,nplies, t, theta, mat_idx\n\n\n\n\n\n","category":"method"},{"location":"reference/reference/#OWENSPreComp.seg_info-NTuple{16, Any}","page":"API Reference","title":"OWENSPreComp.seg_info","text":"seg_info(ch, rle, nseg, nseg_u, nseg_p, xnode_u, ynode_u,\nxnode_l, ynode_l, ndl1, ndu1, loc_web, weby_u, weby_l, n_scts,\nxsec_node)\n\nNOTE: coord transformation from xaf-yaf to yre-zref and seg info\n\n\n\n\n\n","category":"method"},{"location":"reference/reference/#OWENSPreComp.tw_rate-Tuple{Any, Any, Any}","page":"API Reference","title":"OWENSPreComp.tw_rate","text":"tw_rate(naf, sloc, tw_aero)\n\nArguments\n\nnaf: no of blade stations\nsloc: vector of station locations\ntw_aero_d: vector of twist distribution in degrees\n\nOutputs\n\nth_prime_d: vector of twist rates in degrees\n\n\n\n\n\n","category":"method"},{"location":"#OWENSPreComp","page":"Home","title":"OWENSPreComp","text":"","category":"section"},{"location":"","page":"Home","title":"Home","text":"Classical laminate theory for composite wings/blades based on: https://nwtc.nrel.gov/PreComp","category":"page"},{"location":"","page":"Home","title":"Home","text":"Please make all feature changes and bug fixes as branches and then create pull requests against the dev branch.  The dev branch will be periodically pulled into master for version changes.","category":"page"},{"location":"","page":"Home","title":"Home","text":"This code has been translated to the Julia programming language and modified to handle automatic differentiation by Taylor McDonnell at Brigham Young University during his PhD work.","category":"page"}]
}
